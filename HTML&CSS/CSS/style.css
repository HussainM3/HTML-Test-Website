/* 
Example method:
    p {
        color: red;
    } 

Ruleset Terms:
    Selector — beginning of ruleset used to target element styled
    Declaration Block — code in-between (and including) curly braces ({ }) containing CSS declaration(s)
    Declaration — group name for property and value pair that applying style to selected element
    Property — first part of declaration signifying visual characteristic of the element to be modified
    Value — second part of declaration signifying value of the property 
*/

/* Below, a type selector is used: p, h1 */
p {
    color: green;
}

h1 {
    color: maroon;
}

/* Universal selector is * */
/* * {
    border: 1px solid red;
  } */

/* To select an HTML element by its class using CSS, a period (.) must be prepended to the class’s name
(Value of what class is set to. e.g <h1 class='title'>Top Vacation Spots</h1>*/
.title {
    color: teal;
}

/* can add multiple classes to HTML element’s class attribute: <h1 class='title uppercase'>Top Vacation Spots</h1> */
.uppercase{
    text-transform: uppercase;
}

/* To select an element’s ID with CSS, we prepend the id name with a number sign (#):
    <h1 class='title uppercase' id='article-title'>Top Vacation Spots</h1> */
#article-title{
    font-family: cursive;
}

/* Factors such as user interaction, site navigation, and position in the document tree can give elements different state with pseudo-class */
a:hover {
    color: darkorange;
} 
/* above code changes color of link if mouse hovers it */

/* Specificity is the order by which the browser decides which CSS styles will be displayed 
   Good practice to order using the lowest degree of specificity to highes. 
   IDs are the most specific > classes > type.*/

/* Can also chain elements (e.g type and class): */
h2.destination {
    font-family: Tahoma;
    }

/* Can get descendants of an element just by writing its descendant after: */
li h4 {
    color: gold;
}

/* set multiple elements by separating by comma: */
h5, li {
    font-family: monospace;
}

/* <!-- 
BOX MODEL:
All elements on a web page are interpreted by the browser as “living” inside of a box.
For ex, when you change background color of element, you change the background color of its entire box.
model includes the content area’s size (width and height) and the element’s padding, border, and margin.
--> */

/* <!-- Borders can be set with a specific width, style, and color --> */

/* <!-- space between the contents of a box and the borders of a box is known as padding --> */

/* <!-- Margin refers to the space directly outside of the box. --> */
  /* <!-- Can set margin to 0 auto (margin: 0 auto;) to center it horizontally --> */

/* <!-- Because a web page can be viewed through displays of differing screen size, the content on the web page can suffer from those changes in size. 
  To avoid this problem, CSS offers two properties that can limit how narrow or how wide an element’s box can be sized to: 
min-width—this property ensures a minimum width of an element’s box.
max-width—this property ensures a maximum width of an element’s box.
--> */


/* <!-- overflow property controls what happens to content that spills, or overflows, outside its box 
most commonly used values are:

hidden—when set to this value, any content that overflows will be hidden from view.
scroll—when set to this value, a scrollbar will be added to the element’s box so that the rest of the content can be viewed by scrolling.
visible—when set to this value, the overflow content will be displayed outside of the containing element. Note, this is the default value.
--> */

/* <!-- Different type of box model: Border-box 
  - avoids the dimensional issues that exist:
  - height and width of the box will remain fixed. border thickness and padding will be included inside of the box, which means the overall dimensions of the box do not change
--> */

/* Web safe fonts: https://www.cssfontstack.com/ */
h1 {
  font-family: Caslon, Georgia, 'Times New Roman';
}
/* Georgia and times new roman are fallback fonts if Caslon is not available */
